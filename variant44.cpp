/*
 * Даден е двумерен масив A[N,M] където N,M  са цели числа в интервала [2,6] и се въвеждат от клавиатурата.
 * Да се състави програма, която въвежда стойностите на елементите на масива и реализира следното:
 * 1. Формира нов масив C, който съдържа елементите от масив A, които имат еднакви индекси за ред и стълб
 * 2. Коригира масив A, като заменя положителните елементи с номера на реда, отрицателните с номера на стължа, а нулевите не променя
 * 3. Извежда на екрана променения масив в табличен вид
 */

#include <stdio.h>
#include <stdlib.h>
#include <windows.h>

int main() { //от тук започва главната функция на програмата
	SetConsoleOutputCP(1251); //активира кирилицата в конзолата
	int N, M; //създадохме променливи, в които ще вкараме бройката на редовете и стълбовете
	/*
	* с цикъл do-while ще следим дали въведеното числа за редове и стълбове влизат в интервала [2,6]
	*/
	do
	{ 	printf("Въведете броят на редовете (цяло число в интевал [2,6]): ");
		scanf("%d", &N); //въвеждаме стойност цяло число за N от конзолата след горния надпис
	}while(N<2 || N>6);
	do
	{ 	printf("Въведете броят на стълбовете (цяло число в интевал [2,6]): ");
		scanf("%d", &M); //въвеждаме стойност цяло число за N от конзолата след горния надпис
	}while(M<2 || M>6);
	/*
	* while(N<2 || N>6); - така следим дали въведеното число не е
	* по-малко от 2 или по-голямо от 6
	* и ако е, ще ни кара да въвеждаме стойност наново, т.е. ще изпълнява цикъла докато
	* не въведем 2,3,4,5 или 6
	*/

	float A[N][M]; //двумерен масив с реални(дробни) числа,който има N на бр редове и M бр стълбове
	int br=0; //в br ще запаметим броя на елементите от А, които имат еднакви индекси за ред и стълб
	printf("\nВъведете елементите на двумерния масив A:\n");
	//следва цикъл в цикъл за обхождане и въвеждане на елементите на целия масив:
	for(int i=0; i<N; i++)
	{ 	for(int j=0; j<M; j++)
		{ 	printf("A[%d][%d]= ", i, j); //изписва A[0][0]=, A[0][1]=, A[0][2]= и т.н.
			scanf("%f", &A[i][j]); //въвеждаме стойност за елемент на масива от клавиатурата
			if(i==j) br++; //добавя +1 към br когато засече елемент , който има
			//еднакви индекси за ред и стълб
		}
	}
	
	float B[br]; //създаваме масив B, който има брой елементи, равен на br
	int index=0; //ще служи за следене на индексите при приемане на стойностите на масив B
 	//обхождаме масив A и коригираме по точка 2 от заданието, също така изпълняваме и точка 1
	for(int i=0; i<N; i++)
	{ 	for(int j=0; j<M; j++)
		{ 	if(A[i][j]>0) A[i][j]=i; //ако елемента е полож. стойността му става номера на реда
 	 	 	if(A[i][j]<0) A[i][j]=j; //ако елемента е отриц. стойността му става номера на стълба
 	 	 	if(i==j)
			{
			B[index]=A[i][j]; //тук изпълняваме точка 1 от заданието, т.е. когато
 	 	 	//индекса на реда е равен на индекса стълба в масив A, елемента отива в масив B
 	 	 	index++; //добавя +1 към index за да може следващия път когато вкарваме елемент
 	 	 	//в масив B да сложи стойността в следващия по ред елемент в него
 	 	  	}
		}
	}

 	printf("\nПромененият масив A изглежда така:\n");
	//обхождаме масив A за да го покажем така както сме го променили  - точка 3 от заданието
	for(int i=0; i<N; i++)
	{ 	for(int j=0; j<M; j++)
		{
			printf("%f\t", A[i][j]); // \t е за табличен вид
		}
		printf("\n");
	}
	printf("\n\n");
	//Когато използваме \n в printf това означава нов ред след него.
	system("pause"); //задържа конзоалта до натискането на клавиш (Press any key to continue . . .)
	return 0; //връща стойност 0 от главната функция на програмата (просто добър навик за писане)
}

