/*
 * Даден е двумерен масив A[N,N] където N е цяло число в интервала [12,16] и се въвежда от клавиатурата.
 * Да се състави програма, която въвежда стойностите на елементите на масива и реализира следното:
 * 1. Намира средноаритметичната стойност от положителните елементи на масива
 * 2. Формира нов масив B, който има за елементи тези от елементите на A, които са разположени под главния диагонал
 * 3. Извежда на екрана променения масив в табличен вид
 */


#include <stdio.h>
#include <stdlib.h>
#include <windows.h>

int main()
{
	SetConsoleOutputCP(1251); //служи за активиране на кирилицата
	
	int N=0; //в N ще присвоим бройката на елементите на редовете и стълбовете (квадратна матрица)
	while(N<12 || N>16)
	{
		printf("Въведете броят на редовете и стълбовете на масив A (12<=N<=16): "); //изписва го в конзолата
		scanf("%d", &N); //изчаква за въвеждане стойността на N
		if(N<12 || N>16) printf("Моля спазвайте интервала!\n");
	}
	//това е цикъл, който ще се изпълнява, докато не въведем число от 12 до 16
	//по принцип  цикъл while може да не се изпълни, но в зададените условия - (N<12 || N>16)
	//той ще се изпълне поне веднъж, защото началната стойност на N е 0 и отгховаря на условието
	//т.е. началанта стойност на N е по-малка от 12, а ние сме казали, че ако е по-малко от 12 или по-голямо
	//от 16, трябва да се изпълне цикъла
	int elements = N*N-N-(N*N-N)/2;
	float B[elements]; //създава масив B (реални числа, дробни), с брой елементи, равни на
	//толкова елемента от A, които се намират над главния диагонал
	/*Начертай си една матрица например с 4 реда и 4 стълба (ако искаш и друго число)
	и сметни по формулата горе колко се получава: 4x4-4-(4x4-4):2 = ?
	Получи 6? точно толкова елемента, колкото са над главния диагонал*/
	float A[N][N]; //съзадава масив A (реални числа, дробни), който има N на брой редове и стълбове
	float sumA=0; //в sumA ще присвоим стойността на всички положителни елементи на масив A
	int counterPositive=0; //в counterPositive ще добавяме +1 когато въведем положителен елемент
	int index=0; //с index ще следим индексите на масив B, когато им присвояваме елементите на А, които
	//са над главния диагонал
	for(int i=0; i<N; i++)
	{
		for(int j=0; j<N; j++)
		{
			printf("A[%d][%d]= ", i, j); //изпива A[0][1]= , A[0][2]= и т.н.
			scanf("%f", &A[i][j]); //изчаква въвеждането на стойността на елемента от клавиатурата
			if(A[i][j]>0) //когато въведеният елемент е положителен (т.е. по-голям от 0)
			{
				sumA = sumA + A[i][j]; // добавя към сумата елемента
				counterPositive++; //добавя 1 към counterPositive
			}
			if(i<j) //дали индекса на реда е по-малък от този на стълба (т.е. дали е над главния диагонал)
			{
				B[index]=A[i][j]; //присвоява за пореден елемент от B стойността на елемента от A
				index++; //и добавяме към index едно за да може следващия път да добавим към сл. елемент на B
			}
		}
	}
	printf("\nСредната стойност на положителните елементи в масив A = %f\n", sumA/counterPositive);
	//Средноаритметичното е = на сумата от положителните елементи делена на броят им
	
	printf("\nМасив B изглежда така:\n");
	for(int i=0; i<elements; i++) printf("%f\t", B[i]); //изрва на екрана елементите от B в табличен вид - \t
	
	system("pause");
	return 0;
}

/*
* %d е за цяло число от тип int (може и с %i)
* %f е за дробно число, например от тип float, double
* \n означава нов ред след него
* \t означава табспейс (т.е. изкарваме елементите в табличен вид /или поне тя така твърди xD/)
*/